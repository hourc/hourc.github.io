<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/05/GIT%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/09/05/GIT%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="GIT分布式版本控制工具"><a href="#GIT分布式版本控制工具" class="headerlink" title="GIT分布式版本控制工具"></a>GIT分布式版本控制工具</h1><h2 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h2><ul><li>了解Git基本概念</li><li>能够概述git工作流程</li><li>能够使用git常用命令</li><li>熟悉git代码托管服务</li><li>能够使用idea操作git</li></ul><h2 id="2、概述"><a href="#2、概述" class="headerlink" title="2、概述"></a>2、概述</h2><h3 id="2-1-开发中的实用场景"><a href="#2-1-开发中的实用场景" class="headerlink" title="2.1 开发中的实用场景"></a>2.1 开发中的实用场景</h3><p>备份</p><p>代码还原</p><p>协同开发</p><p>追溯问题代码的编写人员和编写时间</p><h3 id="2-2版本控制器方式"><a href="#2-2版本控制器方式" class="headerlink" title="2.2版本控制器方式"></a>2.2版本控制器方式</h3><ul><li>集中式版本控制工具</li></ul><p>举例：SVN和CVS</p><ul><li>分布式版本控制工具</li></ul><p>没有中央服务器，每个人电脑上都是一个完整的版本库。</p><p>举例：GIt</p><h3 id="2-3Git工作流程"><a href="#2-3Git工作流程" class="headerlink" title="2.3Git工作流程"></a>2.3Git工作流程</h3><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220902090631724.png" alt="image-20220902090631724"></p><p>命令如下：</p><p>​    1.clone（克隆）：从远程仓库中克隆到本地仓库</p><p>​    2.checkout（检出）：从本地仓库中检出一个仓库分支然后进行修订</p><p>​    3.add(添加)：在提交前先将代码提交到暂存区</p><p>​    4.commit（提交）：提交到本地仓库。本地仓库中保存修改的各个历史版本</p><p>​    5.fetch(抓取)：从远程库，抓取到本地仓库，不进行任何的合并操作，一般操作比较少</p><p>​    6.pull(拉取)：从远程库拉到本地库，自动进行合并（merge），然后进行放到工作区，相当于fetch + merge</p><p>​    7.push（推送）：修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</p><h2 id="3-Git安装与常用命令"><a href="#3-Git安装与常用命令" class="headerlink" title="3.Git安装与常用命令"></a>3.Git安装与常用命令</h2><h3 id="3-1Git环境配置"><a href="#3-1Git环境配置" class="headerlink" title="3.1Git环境配置"></a>3.1Git环境配置</h3><h4 id="3-1-1下载与安装"><a href="#3-1-1下载与安装" class="headerlink" title="3.1.1下载与安装"></a>3.1.1下载与安装</h4><p>官网下载，默认傻瓜式安装</p><p>Git GUI：Git提供的图形管理工具</p><p>Git Bash：Git提供的命令行工具</p><p>设置用户名称和email地址</p><h4 id="3-1-2基本配置"><a href="#3-1-2基本配置" class="headerlink" title="3.1.2基本配置"></a>3.1.2基本配置</h4><p>1.打开Bash</p><p>2.设置用户信息</p><p>git config –global user.name ‘hrunc’</p><p>git config –global user.email ‘<a href="mailto:&#x37;&#56;&#x31;&#x36;&#51;&#x39;&#48;&#55;&#52;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#x37;&#56;&#x31;&#x36;&#51;&#x39;&#48;&#55;&#52;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a>‘</p><p>查看配置信息</p><p>git config –list</p><p>git config –global user.name</p><p>git config –global user.email</p><h4 id="3-1-3解决GitBash乱码问题"><a href="#3-1-3解决GitBash乱码问题" class="headerlink" title="3.1.3解决GitBash乱码问题"></a>3.1.3解决GitBash乱码问题</h4><p>1.打开Bash执行下面命令</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config --global core.quotepath <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>2.$(git_home)/etc/bash.bashrc文件下面加入下面两行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">LC_ALL</span>=<span class="hljs-string">&quot;zh_CN.UTF-8&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-4为常用指令配置别名"><a href="#3-1-4为常用指令配置别名" class="headerlink" title="3.1.4为常用指令配置别名"></a>3.1.4为常用指令配置别名</h4><ol><li>打开用户目录，创建.bashrc文件</li></ol><p>打开gitbash命令行，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> ~/.bashrc<br></code></pre></td></tr></table></figure><ol><li>在.bashrc文件中输入如下内容：</li></ol><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#用于输出git提交日志</span><br><span class="hljs-keyword">alias</span> git-log=&#x27;git log <span class="hljs-params">--pretty=oneline</span> <span class="hljs-params">--all</span> <span class="hljs-params">--graph</span> <span class="hljs-params">--abbrev-commit</span>&#x27;<br><span class="hljs-comment">#用于输出当前目录所有文件及基本信息</span><br><span class="hljs-keyword">alias</span> ll=&#x27;<span class="hljs-keyword">ls</span> -al&#x27;<br></code></pre></td></tr></table></figure><h3 id="3-2获取本地仓库"><a href="#3-2获取本地仓库" class="headerlink" title="3.2获取本地仓库"></a>3.2获取本地仓库</h3><p>1）在电脑的任意位置创建一个空目录</p><p>2）进入这个目录，点击右键打开Git Bash窗口</p><p>3）执行命令git init</p><p>4）如果创建成功可以看到隐藏的.git目录</p><h3 id="3-3基础操作命令"><a href="#3-3基础操作命令" class="headerlink" title="3.3基础操作命令"></a>3.3基础操作命令</h3><p>Git工作目录下对文件的修改（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git命令而发生变化。</p><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220902103225464.png" alt="image-20220902103225464"></p><p>1.git add                (工作区 ——&gt; 暂存区)</p><p>2.git commit        （暂存区 ——&gt;本地仓库）</p><h4 id="3-3-1-查看修改的状态（status"><a href="#3-3-1-查看修改的状态（status" class="headerlink" title="3.3.1*查看修改的状态（status)"></a>3.3.1*查看修改的状态（status)</h4><ul><li>作用：查看修改的状态（暂存区、工作区）</li><li>命令形式：git status</li></ul><h4 id="3-3-2-添加工作区到暂存区（add）"><a href="#3-3-2-添加工作区到暂存区（add）" class="headerlink" title="3.3.2*添加工作区到暂存区（add）"></a>3.3.2*添加工作区到暂存区（add）</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令形式：git add单个文件名|通配符<ul><li>将所有修改加入到暂存区：git add .</li></ul></li></ul><h4 id="3-3-3-提交暂存区到本地仓库（commit）"><a href="#3-3-3-提交暂存区到本地仓库（commit）" class="headerlink" title="3.3.3*提交暂存区到本地仓库（commit）"></a>3.3.3*提交暂存区到本地仓库（commit）</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令形式：git commit -m ‘注释内容’</li></ul><h4 id="3-3-4-查看提交日志"><a href="#3-3-4-查看提交日志" class="headerlink" title="3.3.4*查看提交日志"></a>3.3.4*查看提交日志</h4><ul><li>作用:查看提交记录</li><li>命令形式：git log<ul><li>options<ul><li> -all 显示所有分支</li><li>–pretty=oneline 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitID更简短</li><li>–graph 以图的形式显示</li></ul></li></ul></li></ul><h4 id="3-3-5版本回退"><a href="#3-3-5版本回退" class="headerlink" title="3.3.5版本回退"></a>3.3.5版本回退</h4><ul><li>作用：版本切换</li><li>命令形式：git reset –hard commitID<ul><li>commitID可以使用git-log 或 git log 指令查看</li></ul></li><li>如何查看已删除的记录<ul><li>git reflog</li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="3-3-6添加文件至忽略列表"><a href="#3-3-6添加文件至忽略列表" class="headerlink" title="3.3.6添加文件至忽略列表"></a>3.3.6添加文件至忽略列表</h4><p>创建一个.gitignore的文件（文件名称固定），列出要忽略的文件模式</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># no .a files</span><br>*<span class="hljs-string">.a</span><br><span class="hljs-comment"># but do track lib.a, even though you&#x27;re ignoring .a files above</span><br>!lib.a<br><span class="hljs-comment"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class="hljs-string">/TODO</span><br><span class="hljs-comment"># ignore all files in the build/ directory</span><br>build/<br><span class="hljs-comment"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br>doc/*<span class="hljs-string">.txt</span><br><span class="hljs-comment"># ignore all .pdf files in the doc/ directory</span><br>doc/**/*<span class="hljs-string">.pdf</span><br></code></pre></td></tr></table></figure><h3 id="3-4分支"><a href="#3-4分支" class="headerlink" title="3.4分支"></a>3.4分支</h3><h4 id="3-4-1查看分支"><a href="#3-4-1查看分支" class="headerlink" title="3.4.1查看分支"></a>3.4.1查看分支</h4><ul><li>命令：git branch</li></ul><h4 id="3-4-2-创建本地分支"><a href="#3-4-2-创建本地分支" class="headerlink" title="3.4.2 创建本地分支"></a>3.4.2 创建本地分支</h4><ul><li>命令：git branch 分支名</li></ul><h4 id="3-4-3-切换分支（checkout）"><a href="#3-4-3-切换分支（checkout）" class="headerlink" title="3.4.3 *切换分支（checkout）"></a>3.4.3 *切换分支（checkout）</h4><ul><li>命令：git checkout 分支名</li></ul><p>创建并切换</p><ul><li>命令：git checkout -b 分支名</li></ul><h4 id="3-4-4-合并分支"><a href="#3-4-4-合并分支" class="headerlink" title="3.4.4 *合并分支"></a>3.4.4 *合并分支</h4><p>一个分支上的提交可以合并到另一个分支</p><ul><li>命令：git merge 分支名称</li></ul><h4 id="3-4-5删除分支"><a href="#3-4-5删除分支" class="headerlink" title="3.4.5删除分支"></a>3.4.5删除分支</h4><p>不能删除当前分支，只能删除其他分支</p><p>git branch -d b1    删除分支时，需要做各种检查</p><p>git branch -D b2    不做任何检查，强制删除</p><h4 id="3-4-6解决冲突"><a href="#3-4-6解决冲突" class="headerlink" title="3.4.6解决冲突"></a>3.4.6解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下</p><pre><code class="hljs">1. 处理文件中冲突的地方 2. 将解决完冲突的地方加入暂存区（add） 3. 提交到仓库（commit）</code></pre><h4 id="3-4-7开发中分支使用原则与流程"><a href="#3-4-7开发中分支使用原则与流程" class="headerlink" title="3.4.7开发中分支使用原则与流程"></a>3.4.7开发中分支使用原则与流程</h4><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220902161144673.png" alt="image-20220902161144673"></p><h2 id="4-Github操作"><a href="#4-Github操作" class="headerlink" title="4.Github操作"></a>4.Github操作</h2><h3 id="4-1-创建远程仓库"><a href="#4-1-创建远程仓库" class="headerlink" title="4.1 创建远程仓库"></a>4.1 创建远程仓库</h3><h3 id="4-2-远程仓库操作"><a href="#4-2-远程仓库操作" class="headerlink" title="4.2 远程仓库操作"></a>4.2 远程仓库操作</h3><h4 id="4-2-1-创建远程仓库别名"><a href="#4-2-1-创建远程仓库别名" class="headerlink" title="4.2.1 创建远程仓库别名"></a>4.2.1 创建远程仓库别名</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span><br></code></pre></td></tr></table></figure><p>查看远程仓库别名</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git remote <span class="hljs-built_in">add</span> 别名 远程地址<br></code></pre></td></tr></table></figure><p>远程地址</p><h4 id="4-2-2-推送本地分支到远程仓库"><a href="#4-2-2-推送本地分支到远程仓库" class="headerlink" title="4.2.2 推送本地分支到远程仓库"></a>4.2.2 推送本地分支到远程仓库</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">git <span class="hljs-built_in">push</span> 别名 分支<br></code></pre></td></tr></table></figure><h4 id="4-2-3-拉取远程库到本地库"><a href="#4-2-3-拉取远程库到本地库" class="headerlink" title="4.2.3 拉取远程库到本地库"></a>4.2.3 拉取远程库到本地库</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> pull 别名 分支<br></code></pre></td></tr></table></figure><h4 id="4-2-4-克隆远程库到本地"><a href="#4-2-4-克隆远程库到本地" class="headerlink" title="4.2.4 克隆远程库到本地"></a>4.2.4 克隆远程库到本地</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">远程仓库地址</span><br></code></pre></td></tr></table></figure><p>clone会做如下三件事：1、拉取代码 2、初始化本地库 3、创建别名（origin）</p><h3 id="4-3-跨团队协作"><a href="#4-3-跨团队协作" class="headerlink" title="4.3 跨团队协作"></a>4.3 跨团队协作</h3><p>GItHub上操作</p><p>fork</p><p>将别人团队的代码叉过来</p><p>Pull requests</p><p>代码修改完，发给原团队</p><p>Merge pull request</p><p>原团队合并代码</p><h3 id="4-4-免密登录"><a href="#4-4-免密登录" class="headerlink" title="4.4 免密登录"></a>4.4 免密登录</h3><p>家目录下打开git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rvf .ssh<br></code></pre></td></tr></table></figure><p>//删除.shh目录及其文件</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">shh-kengen -<span class="hljs-built_in">t</span> rsa  -C 你的邮箱<br></code></pre></td></tr></table></figure><p>//运行命令生成.shh密钥</p><p>将生成的id_rsa.pub添加到github中</p><p>复制id_rsa.pub内的内容</p><p>github settings 里SSh and GPG keys里New SHHkey</p><p>粘贴</p><p>拉取远程仓库到本地</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> pull git<span class="hljs-variable">@github</span>.com:hourc/Demo.git master<br></code></pre></td></tr></table></figure><p>提交本地库到远程库</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git <span class="hljs-keyword">push</span> git@github.com:hourc/Demo.git master<br></code></pre></td></tr></table></figure><h3 id="4-5码云远程仓库操作"><a href="#4-5码云远程仓库操作" class="headerlink" title="4.5码云远程仓库操作"></a>4.5码云远程仓库操作</h3><h4 id="4-5-1注册码云"><a href="#4-5-1注册码云" class="headerlink" title="4.5.1注册码云"></a>4.5.1注册码云</h4><h4 id="4-5-2创建远程仓库"><a href="#4-5-2创建远程仓库" class="headerlink" title="4.5.2创建远程仓库"></a>4.5.2创建远程仓库</h4><h4 id="4-5-3配置SSh公钥"><a href="#4-5-3配置SSh公钥" class="headerlink" title="4.5.3配置SSh公钥"></a>4.5.3配置SSh公钥</h4><ul><li>生成SSH公钥<ul><li>ssh-keygen -t rsa</li><li>不断回车</li></ul></li><li>Gitee设置账户公钥<ul><li>获取公钥<ul><li>cat ~/.ssh/id_rsa.pub</li></ul></li><li>验证是否配置成功<ul><li>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x65;&#x65;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x65;&#x65;&#x2e;&#99;&#111;&#109;</a></li></ul></li></ul></li></ul><h4 id="4-5-4-操作远程仓库"><a href="#4-5-4-操作远程仓库" class="headerlink" title="4.5.4 操作远程仓库"></a>4.5.4 操作远程仓库</h4><p>添加远程仓库</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="language-bash"> origin git@gitee.com:hourc/giteedemo.git</span><br></code></pre></td></tr></table></figure><p>查看远程仓库</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote</span><br></code></pre></td></tr></table></figure><p>推送远程仓库</p><p>命令：git push [][][][] [-f] [–set-upstream] [远端名称] [本地分支名] [：远端分支名]</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><ul><li><p>-f 强制覆盖</p></li><li><p>–set-upstream 推送到远端的同时并建立起和远端分支的关联关系</p><ul><li>```<br>git push –set-upstream origin master:master<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><span class="hljs-code">    </span><br><span class="hljs-code"></span><br><span class="hljs-bullet">-</span> 如果当前分支和远端分支关联，则可以省略分支名和远端名<br><br><span class="hljs-bullet">  -</span> <span class="hljs-code">```</span><br><span class="hljs-code">    git push//将master分支推送到远端的已关联的分支</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>本地分支与远程分支的关联关系</p><ul><li>查看关联关系可以用git branch -vv 命令</li></ul><p>从远程仓库克隆</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee.com:hourc/giteedemo.git<br></code></pre></td></tr></table></figure><p>从远程仓库抓取和拉取</p><ul><li>抓取命令：git fetch [remote name] [branch name]<ul><li><strong>抓取指令就是将远端仓库里的更新都抓取到本地，不会进行合并</strong></li><li>如果 不指定远端名称和分支名 ，则抓取所有分支。</li></ul></li><li>拉取命令：git pull [remote name] [branch name]<ul><li><strong>拉取指令就是将远端仓库的修改拉倒本地进行合并，等同于fetch + merge</strong></li><li>如果 不指定远端名称和分支名 ，则抓取所有并更新当前分支。</li></ul></li></ul><h2 id="5-在idea中使用git"><a href="#5-在idea中使用git" class="headerlink" title="5.在idea中使用git"></a>5.在idea中使用git</h2><h3 id="5-1-在idea中配置git"><a href="#5-1-在idea中配置git" class="headerlink" title="5.1 在idea中配置git"></a>5.1 在idea中配置git</h3><p>settings —&gt; git</p><h3 id="5-2-在idea中操作git"><a href="#5-2-在idea中操作git" class="headerlink" title="5.2 在idea中操作git"></a>5.2 在idea中操作git</h3><p>场景：本地已有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发</p><h4 id="5-2-1-创建远程仓库"><a href="#5-2-1-创建远程仓库" class="headerlink" title="5.2.1 创建远程仓库"></a>5.2.1 创建远程仓库</h4><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905120847814.png" alt="image-20220905120847814"></p><h4 id="5-2-2初始化本地仓库"><a href="#5-2-2初始化本地仓库" class="headerlink" title="5.2.2初始化本地仓库"></a>5.2.2初始化本地仓库</h4><p>添加.gitignore文件到项目中，忽略.idea等文件</p><p>选择项目</p><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905121838605.png" alt="image-20220905121838605"></p><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905122015354.png" alt="image-20220905122015354"></p><h4 id="5-2-3提交到本地仓库"><a href="#5-2-3提交到本地仓库" class="headerlink" title="5.2.3提交到本地仓库"></a>5.2.3提交到本地仓库</h4><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905122705572.png" alt="image-20220905122705572"></p><h4 id="5-2-4设置远程仓库"><a href="#5-2-4设置远程仓库" class="headerlink" title="5.2.4设置远程仓库"></a>5.2.4设置远程仓库</h4><p>VCS–》git–》push</p><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905123543970.png" alt="image-20220905123543970"></p><h4 id="5-2-5-推送到远程仓库"><a href="#5-2-5-推送到远程仓库" class="headerlink" title="5.2.5 推送到远程仓库"></a>5.2.5 推送到远程仓库</h4><p>VCS–》git–》push</p><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905125352714.png" alt="image-20220905125352714"></p><h4 id="5-2-6-克隆远程仓库到本地"><a href="#5-2-6-克隆远程仓库到本地" class="headerlink" title="5.2.6 克隆远程仓库到本地"></a>5.2.6 克隆远程仓库到本地</h4><p><img src="C:\Users\hrunc\AppData\Roaming\Typora\typora-user-images\image-20220905125454495.png" alt="image-20220905125454495"></p><h4 id="5-2-7-创建分支"><a href="#5-2-7-创建分支" class="headerlink" title="5.2.7 创建分支"></a>5.2.7 创建分支</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文章标题</title>
    <link href="/2022/09/02/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
    <url>/2022/09/02/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h2><h3 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main（）&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>my first blog</title>
    <link href="/2022/09/02/my-first-blog/"/>
    <url>/2022/09/02/my-first-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hello</title>
    <link href="/2022/09/02/hello/"/>
    <url>/2022/09/02/hello/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/02/hello-world/"/>
    <url>/2022/09/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
