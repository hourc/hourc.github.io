{"meta":{"title":"Hourc","subtitle":"","description":"hourc Blog","author":"hourc","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-09-02T16:26:01.000Z","updated":"2022-09-02T16:26:01.600Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"GIT分布式版本控制工具","date":"2022-09-05T09:58:36.910Z","updated":"2022-09-05T09:57:20.787Z","comments":true,"path":"2022/09/05/GIT分布式版本控制工具/","link":"","permalink":"http://example.com/2022/09/05/GIT%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/","excerpt":"","text":"GIT分布式版本控制工具1、目标 了解Git基本概念 能够概述git工作流程 能够使用git常用命令 熟悉git代码托管服务 能够使用idea操作git 2、概述2.1 开发中的实用场景备份 代码还原 协同开发 追溯问题代码的编写人员和编写时间 2.2版本控制器方式 集中式版本控制工具 举例：SVN和CVS 分布式版本控制工具 没有中央服务器，每个人电脑上都是一个完整的版本库。 举例：GIt 2.3Git工作流程 命令如下： ​ 1.clone（克隆）：从远程仓库中克隆到本地仓库 ​ 2.checkout（检出）：从本地仓库中检出一个仓库分支然后进行修订 ​ 3.add(添加)：在提交前先将代码提交到暂存区 ​ 4.commit（提交）：提交到本地仓库。本地仓库中保存修改的各个历史版本 ​ 5.fetch(抓取)：从远程库，抓取到本地仓库，不进行任何的合并操作，一般操作比较少 ​ 6.pull(拉取)：从远程库拉到本地库，自动进行合并（merge），然后进行放到工作区，相当于fetch + merge ​ 7.push（推送）：修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库 3.Git安装与常用命令3.1Git环境配置3.1.1下载与安装官网下载，默认傻瓜式安装 Git GUI：Git提供的图形管理工具 Git Bash：Git提供的命令行工具 设置用户名称和email地址 3.1.2基本配置1.打开Bash 2.设置用户信息 git config –global user.name ‘hrunc’ git config –global user.email ‘&#x37;&#56;&#x31;&#x36;&#51;&#x39;&#48;&#55;&#52;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;‘ 查看配置信息 git config –list git config –global user.name git config –global user.email 3.1.3解决GitBash乱码问题1.打开Bash执行下面命令 1git config --global core.quotepath false 2.$(git_home)/etc/bash.bashrc文件下面加入下面两行 12export LANG=&quot;zh_CN.UTF-8&quot;export LC_ALL=&quot;zh_CN.UTF-8&quot; 3.1.4为常用指令配置别名 打开用户目录，创建.bashrc文件 打开gitbash命令行，执行 1touch ~/.bashrc 在.bashrc文件中输入如下内容： 1234#用于输出git提交日志alias git-log=&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;#用于输出当前目录所有文件及基本信息alias ll=&#x27;ls -al&#x27; 3.2获取本地仓库1）在电脑的任意位置创建一个空目录 2）进入这个目录，点击右键打开Git Bash窗口 3）执行命令git init 4）如果创建成功可以看到隐藏的.git目录 3.3基础操作命令Git工作目录下对文件的修改（增加、删除、更新）会存在几个状态，这些修改的状态会随着我们执行Git命令而发生变化。 1.git add (工作区 ——&gt; 暂存区) 2.git commit （暂存区 ——&gt;本地仓库） 3.3.1*查看修改的状态（status) 作用：查看修改的状态（暂存区、工作区） 命令形式：git status 3.3.2*添加工作区到暂存区（add） 作用：添加工作区一个或多个文件的修改到暂存区 命令形式：git add单个文件名|通配符 将所有修改加入到暂存区：git add . 3.3.3*提交暂存区到本地仓库（commit） 作用：提交暂存区内容到本地仓库的当前分支 命令形式：git commit -m ‘注释内容’ 3.3.4*查看提交日志 作用:查看提交记录 命令形式：git log options -all 显示所有分支 –pretty=oneline 将提交信息显示为一行 –abbrev-commit 使得输出的commitID更简短 –graph 以图的形式显示 3.3.5版本回退 作用：版本切换 命令形式：git reset –hard commitID commitID可以使用git-log 或 git log 指令查看 如何查看已删除的记录 git reflog 这个指令可以看到已经删除的提交记录 3.3.6添加文件至忽略列表创建一个.gitignore的文件（文件名称固定），列出要忽略的文件模式 123456789101112# no .a files*.a# but do track lib.a, even though you&#x27;re ignoring .a files above!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all files in the build/ directorybuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directorydoc/**/*.pdf 3.4分支3.4.1查看分支 命令：git branch 3.4.2 创建本地分支 命令：git branch 分支名 3.4.3 *切换分支（checkout） 命令：git checkout 分支名 创建并切换 命令：git checkout -b 分支名 3.4.4 *合并分支一个分支上的提交可以合并到另一个分支 命令：git merge 分支名称 3.4.5删除分支不能删除当前分支，只能删除其他分支 git branch -d b1 删除分支时，需要做各种检查 git branch -D b2 不做任何检查，强制删除 3.4.6解决冲突当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解 决冲突，解决冲突步骤如下 1. 处理文件中冲突的地方 2. 将解决完冲突的地方加入暂存区（add） 3. 提交到仓库（commit） 3.4.7开发中分支使用原则与流程 4.Github操作4.1 创建远程仓库4.2 远程仓库操作4.2.1 创建远程仓库别名1git remote -v 查看远程仓库别名 1git remote add 别名 远程地址 远程地址 4.2.2 推送本地分支到远程仓库1git push 别名 分支 4.2.3 拉取远程库到本地库1git pull 别名 分支 4.2.4 克隆远程库到本地1git clone 远程仓库地址 clone会做如下三件事：1、拉取代码 2、初始化本地库 3、创建别名（origin） 4.3 跨团队协作GItHub上操作 fork 将别人团队的代码叉过来 Pull requests 代码修改完，发给原团队 Merge pull request 原团队合并代码 4.4 免密登录家目录下打开git bash 1rm -rvf .ssh //删除.shh目录及其文件 1shh-kengen -t rsa -C 你的邮箱 //运行命令生成.shh密钥 将生成的id_rsa.pub添加到github中 复制id_rsa.pub内的内容 github settings 里SSh and GPG keys里New SHHkey 粘贴 拉取远程仓库到本地 1git pull git@github.com:hourc/Demo.git master 提交本地库到远程库 1git push git@github.com:hourc/Demo.git master 4.5码云远程仓库操作4.5.1注册码云4.5.2创建远程仓库4.5.3配置SSh公钥 生成SSH公钥 ssh-keygen -t rsa 不断回车 Gitee设置账户公钥 获取公钥 cat ~/.ssh/id_rsa.pub 验证是否配置成功 ssh -T &#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x65;&#x65;&#x2e;&#99;&#111;&#109; 4.5.4 操作远程仓库添加远程仓库 1git remote add origin git@gitee.com:hourc/giteedemo.git 查看远程仓库 1git remote 推送远程仓库 命令：git push [][][][] [-f] [–set-upstream] [远端名称] [本地分支名] [：远端分支名] 1git push origin master -f 强制覆盖 –set-upstream 推送到远端的同时并建立起和远端分支的关联关系 ```git push –set-upstream origin master:master1234567 - 如果当前分支和远端分支关联，则可以省略分支名和远端名 - ``` git push //将master分支推送到远端的已关联的分支 本地分支与远程分支的关联关系 查看关联关系可以用git branch -vv 命令 从远程仓库克隆 1git clone git@gitee.com:hourc/giteedemo.git 从远程仓库抓取和拉取 抓取命令：git fetch [remote name] [branch name] 抓取指令就是将远端仓库里的更新都抓取到本地，不会进行合并 如果 不指定远端名称和分支名 ，则抓取所有分支。 拉取命令：git pull [remote name] [branch name] 拉取指令就是将远端仓库的修改拉倒本地进行合并，等同于fetch + merge 如果 不指定远端名称和分支名 ，则抓取所有并更新当前分支。 5.在idea中使用git5.1 在idea中配置gitsettings —&gt; git 5.2 在idea中操作git场景：本地已有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发 5.2.1 创建远程仓库 5.2.2初始化本地仓库添加.gitignore文件到项目中，忽略.idea等文件 选择项目 5.2.3提交到本地仓库 5.2.4设置远程仓库VCS–》git–》push 5.2.5 推送到远程仓库VCS–》git–》push 5.2.6 克隆远程仓库到本地 5.2.7 创建分支","categories":[],"tags":[]},{"title":"文章标题","slug":"文章标题","date":"2022-09-02T10:14:23.000Z","updated":"2022-09-02T10:15:33.463Z","comments":true,"path":"2022/09/02/文章标题/","link":"","permalink":"http://example.com/2022/09/02/%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/","excerpt":"","text":"标题一标题二123public static void main（）&#123;&#125;","categories":[],"tags":[]},{"title":"my first blog","slug":"my-first-blog","date":"2022-09-02T10:04:30.000Z","updated":"2022-09-02T10:04:30.235Z","comments":true,"path":"2022/09/02/my-first-blog/","link":"","permalink":"http://example.com/2022/09/02/my-first-blog/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"hello","slug":"hello","date":"2022-09-02T10:02:34.000Z","updated":"2022-09-02T10:02:34.232Z","comments":true,"path":"2022/09/02/hello/","link":"","permalink":"http://example.com/2022/09/02/hello/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-09-02T09:27:45.593Z","updated":"2022-09-02T09:26:11.332Z","comments":true,"path":"2022/09/02/hello-world/","link":"","permalink":"http://example.com/2022/09/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}